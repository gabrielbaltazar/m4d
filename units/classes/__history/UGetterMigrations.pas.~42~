unit UGetterMigrations;

interface

uses
  UGetterMigrationsInterface, UMigrationsInterface, Generics.Collections,
  System.SysUtils;

type
  {$REGION 'TGetterMigrations'}
    /// <Description>
    ///  Standard class to get a list of registered´s migration.
    /// </Description>
    /// <Responsability>
    ///  Get a subset os items from a inputted list, based on the start parameter.
    /// </Responsability>
    /// <Note>
    ///  Information from undocumented methods can be found directly on the interfaces
    ///  from which they come.
    /// </Note>
  {$ENDREGION}
  TGetterMigrations = class(TInterfacedObject, IGetterMigrations)
  private
    function getMigrations(AMigrationsList: TList<IMigration>; APredicate: TPredicate<IMigration>): TList<IMigration>; overload;
  public
    function getMigrations(AMigrationsList: TList<IMigration>; AStartMigrationSeq: Integer): TList<IMigration>; overload;
    function getMigrations(AMigrationsList: TList<IMigration>; AStartMigrationDateTime: TDateTime): TList<IMigration>; overload;
  end;

implementation

{ TGetterMigrations }

function TGetterMigrations.getMigrations(AMigrationsList: TList<IMigration>; AStartMigrationSeq: Integer): TList<IMigration>;
var
  I: Integer;
  Predicate: TPredicate<IMigration>;
begin
  Result := nil;

  Predicate := function(AMigration: IMigration): Boolean
               begin
                 Result := AMigration.SeqVersion >= AStartMigrationSeq;
               end;

  Result := Self.getMigrations(AMigrationsList, Predicate);
end;

function TGetterMigrations.getMigrations(AMigrationsList: TList<IMigration>; AStartMigrationDateTime: TDateTime): TList<IMigration>;
var
  I: Integer;
begin
  Result := nil;

  if Assigned(AMigrationsList) then
  begin
    for I := 0 to AMigrationsList.Count - 1 do
    begin
      if AMigrationsList[I].DateTime >= AStartMigrationDateTime then
      begin
        if not Assigned(Result) then Result := TList<IMigration>.Create;

        Result.Add(AMigrationsList[I]);
      end;
    end;
  end;
end;

function TGetterMigrations.getMigrations(AMigrationsList: TList<IMigration>; APredicate: TPredicate<IMigration>): TList<IMigration>;
var
  I: Integer;
begin
  Result := nil;

  if Assigned(AMigrationsList) then
  begin
    for I := 0 to AMigrationsList.Count - 1 do
    begin
      if APredicate(AMigrationsList[I]) then
      begin

//      if AMigrationsList[I].SeqVersion >= AStartMigrationSeq then
//      begin
        if not Assigned(Result) then Result := TList<IMigration>.Create;

        Result.Add(AMigrationsList[I]);
      end;
    end;
  end;
end;

end.
