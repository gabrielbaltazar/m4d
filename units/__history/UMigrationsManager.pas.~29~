{######################################################################################

                                      M4D Framework

Author: Edgar Borges Pavão
Date of creation: 29/08/2017
Use licence: Free

######################################################################################}

unit UMigrationsManager;

interface

uses
  UDefsMigrations, Generics.Collections;

type
  {$REGION 'IRegisterMigration'}
    /// <Description>
    ///  Standard implementation of the migration´s register.
    /// </Description>
    /// <Note>
    ///  A migration register is responsible for registering the migration within
    ///  the migration management class. Thus, the migration becomes known by the
    ///  migration management class and can be used when needed.
    /// </Note>
  {$ENDREGION}
  IRegisterMigration = interface
    {$REGION 'IRegisterMigration.RegisterMigration'}
      /// <Description>
      ///  Migration register method.
      /// </Description>
      /// <InputParameters>
      ///  AMigration - The migration that will be registered.
      /// </InputParameters>
    {$ENDREGION}
    procedure RegisterMigration(AMigration: IMigration);
  end;

type
  {$REGION 'TMigrationsManager'}
    /// <Description>
    ///  Standard implementation of the migration´s register.
    /// </Description>
    /// <Note>
    ///  A migration register is responsible for registering the migration within
    ///  the migration management class. Thus, the migration becomes known by the
    ///  migration management class and can be used when needed.
    /// </Note>
  {$ENDREGION}
  TMigrationsManager = class(TInterfacedObject, IMigrationsManager, IRegisterMigration)
  private
    FListMigration: TList<IMigration>;
  public
    constructor Create; reintroduce;
    destructor Destroy; override;

    procedure RegisterMigration(AMigration: IMigration);

    function getMigrations(AStartSeqMigration: Integer): TList<IMigration>;

    procedure Execute;
  end;

implementation

{ TMigrationsManager }

constructor TMigrationsManager.Create;
begin
  inherited Create;

  FListMigration := TList<IMigration>.Create;
end;

destructor TMigrationsManager.Destroy;
begin
  if Assigned(FListMigration) then FListMigration.Free;
  
  inherited;
end;

procedure TMigrationsManager.Execute;
begin

end;

function TMigrationsManager.getMigrations(AStartSeqMigration: Integer): TList<IMigration>;
begin
  Result := nil;
end;

procedure TMigrationsManager.RegisterMigration(AMigration: IMigration);
begin
  Self.FListMigration.Add(AMigration)
end;

end.
